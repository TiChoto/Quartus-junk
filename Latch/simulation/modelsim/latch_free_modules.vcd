$date
	Wed Jun 11 20:09:59 2025
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module latch_free_testbench $end
$var parameter 32 ! WIDTH $end
$var reg 32 " alu_A [31:0] $end
$var reg 32 # alu_B [31:0] $end
$var reg 4 $ alu_ctrl [3:0] $end
$var wire 1 % alu_result [31] $end
$var wire 1 & alu_result [30] $end
$var wire 1 ' alu_result [29] $end
$var wire 1 ( alu_result [28] $end
$var wire 1 ) alu_result [27] $end
$var wire 1 * alu_result [26] $end
$var wire 1 + alu_result [25] $end
$var wire 1 , alu_result [24] $end
$var wire 1 - alu_result [23] $end
$var wire 1 . alu_result [22] $end
$var wire 1 / alu_result [21] $end
$var wire 1 0 alu_result [20] $end
$var wire 1 1 alu_result [19] $end
$var wire 1 2 alu_result [18] $end
$var wire 1 3 alu_result [17] $end
$var wire 1 4 alu_result [16] $end
$var wire 1 5 alu_result [15] $end
$var wire 1 6 alu_result [14] $end
$var wire 1 7 alu_result [13] $end
$var wire 1 8 alu_result [12] $end
$var wire 1 9 alu_result [11] $end
$var wire 1 : alu_result [10] $end
$var wire 1 ; alu_result [9] $end
$var wire 1 < alu_result [8] $end
$var wire 1 = alu_result [7] $end
$var wire 1 > alu_result [6] $end
$var wire 1 ? alu_result [5] $end
$var wire 1 @ alu_result [4] $end
$var wire 1 A alu_result [3] $end
$var wire 1 B alu_result [2] $end
$var wire 1 C alu_result [1] $end
$var wire 1 D alu_result [0] $end
$var wire 1 E alu_zero $end
$var wire 1 F alu_overflow $end
$var wire 1 G alu_carry $end
$var wire 1 H alu_negative $end
$var reg 32 I bce_A [31:0] $end
$var reg 32 J bce_B [31:0] $end
$var reg 3 K bce_type [2:0] $end
$var wire 1 L bce_taken $end
$var reg 32 M instruction [31:0] $end
$var wire 1 N opcode [5] $end
$var wire 1 O opcode [4] $end
$var wire 1 P opcode [3] $end
$var wire 1 Q opcode [2] $end
$var wire 1 R opcode [1] $end
$var wire 1 S opcode [0] $end
$var wire 1 T rs [4] $end
$var wire 1 U rs [3] $end
$var wire 1 V rs [2] $end
$var wire 1 W rs [1] $end
$var wire 1 X rs [0] $end
$var wire 1 Y rt [4] $end
$var wire 1 Z rt [3] $end
$var wire 1 [ rt [2] $end
$var wire 1 \ rt [1] $end
$var wire 1 ] rt [0] $end
$var wire 1 ^ rd [4] $end
$var wire 1 _ rd [3] $end
$var wire 1 ` rd [2] $end
$var wire 1 a rd [1] $end
$var wire 1 b rd [0] $end
$var wire 1 c shamt [4] $end
$var wire 1 d shamt [3] $end
$var wire 1 e shamt [2] $end
$var wire 1 f shamt [1] $end
$var wire 1 g shamt [0] $end
$var wire 1 h funct [5] $end
$var wire 1 i funct [4] $end
$var wire 1 j funct [3] $end
$var wire 1 k funct [2] $end
$var wire 1 l funct [1] $end
$var wire 1 m funct [0] $end
$var wire 1 n immediate [15] $end
$var wire 1 o immediate [14] $end
$var wire 1 p immediate [13] $end
$var wire 1 q immediate [12] $end
$var wire 1 r immediate [11] $end
$var wire 1 s immediate [10] $end
$var wire 1 t immediate [9] $end
$var wire 1 u immediate [8] $end
$var wire 1 v immediate [7] $end
$var wire 1 w immediate [6] $end
$var wire 1 x immediate [5] $end
$var wire 1 y immediate [4] $end
$var wire 1 z immediate [3] $end
$var wire 1 { immediate [2] $end
$var wire 1 | immediate [1] $end
$var wire 1 } immediate [0] $end
$var wire 1 ~ jump_address [25] $end
$var wire 1 !! jump_address [24] $end
$var wire 1 "! jump_address [23] $end
$var wire 1 #! jump_address [22] $end
$var wire 1 $! jump_address [21] $end
$var wire 1 %! jump_address [20] $end
$var wire 1 &! jump_address [19] $end
$var wire 1 '! jump_address [18] $end
$var wire 1 (! jump_address [17] $end
$var wire 1 )! jump_address [16] $end
$var wire 1 *! jump_address [15] $end
$var wire 1 +! jump_address [14] $end
$var wire 1 ,! jump_address [13] $end
$var wire 1 -! jump_address [12] $end
$var wire 1 .! jump_address [11] $end
$var wire 1 /! jump_address [10] $end
$var wire 1 0! jump_address [9] $end
$var wire 1 1! jump_address [8] $end
$var wire 1 2! jump_address [7] $end
$var wire 1 3! jump_address [6] $end
$var wire 1 4! jump_address [5] $end
$var wire 1 5! jump_address [4] $end
$var wire 1 6! jump_address [3] $end
$var wire 1 7! jump_address [2] $end
$var wire 1 8! jump_address [1] $end
$var wire 1 9! jump_address [0] $end

$scope task test_alu $end
$upscope $end

$scope task test_bce $end
$upscope $end

$scope task test_decoder $end
$upscope $end

$scope module alu_uut $end
$var parameter 32 :! WIDTH $end
$var wire 1 ;! operandA [31] $end
$var wire 1 <! operandA [30] $end
$var wire 1 =! operandA [29] $end
$var wire 1 >! operandA [28] $end
$var wire 1 ?! operandA [27] $end
$var wire 1 @! operandA [26] $end
$var wire 1 A! operandA [25] $end
$var wire 1 B! operandA [24] $end
$var wire 1 C! operandA [23] $end
$var wire 1 D! operandA [22] $end
$var wire 1 E! operandA [21] $end
$var wire 1 F! operandA [20] $end
$var wire 1 G! operandA [19] $end
$var wire 1 H! operandA [18] $end
$var wire 1 I! operandA [17] $end
$var wire 1 J! operandA [16] $end
$var wire 1 K! operandA [15] $end
$var wire 1 L! operandA [14] $end
$var wire 1 M! operandA [13] $end
$var wire 1 N! operandA [12] $end
$var wire 1 O! operandA [11] $end
$var wire 1 P! operandA [10] $end
$var wire 1 Q! operandA [9] $end
$var wire 1 R! operandA [8] $end
$var wire 1 S! operandA [7] $end
$var wire 1 T! operandA [6] $end
$var wire 1 U! operandA [5] $end
$var wire 1 V! operandA [4] $end
$var wire 1 W! operandA [3] $end
$var wire 1 X! operandA [2] $end
$var wire 1 Y! operandA [1] $end
$var wire 1 Z! operandA [0] $end
$var wire 1 [! operandB [31] $end
$var wire 1 \! operandB [30] $end
$var wire 1 ]! operandB [29] $end
$var wire 1 ^! operandB [28] $end
$var wire 1 _! operandB [27] $end
$var wire 1 `! operandB [26] $end
$var wire 1 a! operandB [25] $end
$var wire 1 b! operandB [24] $end
$var wire 1 c! operandB [23] $end
$var wire 1 d! operandB [22] $end
$var wire 1 e! operandB [21] $end
$var wire 1 f! operandB [20] $end
$var wire 1 g! operandB [19] $end
$var wire 1 h! operandB [18] $end
$var wire 1 i! operandB [17] $end
$var wire 1 j! operandB [16] $end
$var wire 1 k! operandB [15] $end
$var wire 1 l! operandB [14] $end
$var wire 1 m! operandB [13] $end
$var wire 1 n! operandB [12] $end
$var wire 1 o! operandB [11] $end
$var wire 1 p! operandB [10] $end
$var wire 1 q! operandB [9] $end
$var wire 1 r! operandB [8] $end
$var wire 1 s! operandB [7] $end
$var wire 1 t! operandB [6] $end
$var wire 1 u! operandB [5] $end
$var wire 1 v! operandB [4] $end
$var wire 1 w! operandB [3] $end
$var wire 1 x! operandB [2] $end
$var wire 1 y! operandB [1] $end
$var wire 1 z! operandB [0] $end
$var wire 1 {! ALU_control [3] $end
$var wire 1 |! ALU_control [2] $end
$var wire 1 }! ALU_control [1] $end
$var wire 1 ~! ALU_control [0] $end
$var reg 32 !" result [31:0] $end
$var reg 1 "" zero_flag $end
$var reg 1 #" overflow_flag $end
$var reg 1 $" carry_flag $end
$var reg 1 %" negative_flag $end
$var wire 1 &" temp_result [32] $end
$var wire 1 '" temp_result [31] $end
$var wire 1 (" temp_result [30] $end
$var wire 1 )" temp_result [29] $end
$var wire 1 *" temp_result [28] $end
$var wire 1 +" temp_result [27] $end
$var wire 1 ," temp_result [26] $end
$var wire 1 -" temp_result [25] $end
$var wire 1 ." temp_result [24] $end
$var wire 1 /" temp_result [23] $end
$var wire 1 0" temp_result [22] $end
$var wire 1 1" temp_result [21] $end
$var wire 1 2" temp_result [20] $end
$var wire 1 3" temp_result [19] $end
$var wire 1 4" temp_result [18] $end
$var wire 1 5" temp_result [17] $end
$var wire 1 6" temp_result [16] $end
$var wire 1 7" temp_result [15] $end
$var wire 1 8" temp_result [14] $end
$var wire 1 9" temp_result [13] $end
$var wire 1 :" temp_result [12] $end
$var wire 1 ;" temp_result [11] $end
$var wire 1 <" temp_result [10] $end
$var wire 1 =" temp_result [9] $end
$var wire 1 >" temp_result [8] $end
$var wire 1 ?" temp_result [7] $end
$var wire 1 @" temp_result [6] $end
$var wire 1 A" temp_result [5] $end
$var wire 1 B" temp_result [4] $end
$var wire 1 C" temp_result [3] $end
$var wire 1 D" temp_result [2] $end
$var wire 1 E" temp_result [1] $end
$var wire 1 F" temp_result [0] $end
$var wire 1 G" sign_A $end
$var wire 1 H" sign_B $end
$var wire 1 I" sign_result $end
$upscope $end

$scope module bce_uut $end
$var wire 1 J" operandA [31] $end
$var wire 1 K" operandA [30] $end
$var wire 1 L" operandA [29] $end
$var wire 1 M" operandA [28] $end
$var wire 1 N" operandA [27] $end
$var wire 1 O" operandA [26] $end
$var wire 1 P" operandA [25] $end
$var wire 1 Q" operandA [24] $end
$var wire 1 R" operandA [23] $end
$var wire 1 S" operandA [22] $end
$var wire 1 T" operandA [21] $end
$var wire 1 U" operandA [20] $end
$var wire 1 V" operandA [19] $end
$var wire 1 W" operandA [18] $end
$var wire 1 X" operandA [17] $end
$var wire 1 Y" operandA [16] $end
$var wire 1 Z" operandA [15] $end
$var wire 1 [" operandA [14] $end
$var wire 1 \" operandA [13] $end
$var wire 1 ]" operandA [12] $end
$var wire 1 ^" operandA [11] $end
$var wire 1 _" operandA [10] $end
$var wire 1 `" operandA [9] $end
$var wire 1 a" operandA [8] $end
$var wire 1 b" operandA [7] $end
$var wire 1 c" operandA [6] $end
$var wire 1 d" operandA [5] $end
$var wire 1 e" operandA [4] $end
$var wire 1 f" operandA [3] $end
$var wire 1 g" operandA [2] $end
$var wire 1 h" operandA [1] $end
$var wire 1 i" operandA [0] $end
$var wire 1 j" operandB [31] $end
$var wire 1 k" operandB [30] $end
$var wire 1 l" operandB [29] $end
$var wire 1 m" operandB [28] $end
$var wire 1 n" operandB [27] $end
$var wire 1 o" operandB [26] $end
$var wire 1 p" operandB [25] $end
$var wire 1 q" operandB [24] $end
$var wire 1 r" operandB [23] $end
$var wire 1 s" operandB [22] $end
$var wire 1 t" operandB [21] $end
$var wire 1 u" operandB [20] $end
$var wire 1 v" operandB [19] $end
$var wire 1 w" operandB [18] $end
$var wire 1 x" operandB [17] $end
$var wire 1 y" operandB [16] $end
$var wire 1 z" operandB [15] $end
$var wire 1 {" operandB [14] $end
$var wire 1 |" operandB [13] $end
$var wire 1 }" operandB [12] $end
$var wire 1 ~" operandB [11] $end
$var wire 1 !# operandB [10] $end
$var wire 1 "# operandB [9] $end
$var wire 1 ## operandB [8] $end
$var wire 1 $# operandB [7] $end
$var wire 1 %# operandB [6] $end
$var wire 1 &# operandB [5] $end
$var wire 1 '# operandB [4] $end
$var wire 1 (# operandB [3] $end
$var wire 1 )# operandB [2] $end
$var wire 1 *# operandB [1] $end
$var wire 1 +# operandB [0] $end
$var wire 1 ,# branch_type [2] $end
$var wire 1 -# branch_type [1] $end
$var wire 1 .# branch_type [0] $end
$var reg 1 /# branch_taken $end
$upscope $end

$scope module decoder_uut $end
$var wire 1 0# instruction [31] $end
$var wire 1 1# instruction [30] $end
$var wire 1 2# instruction [29] $end
$var wire 1 3# instruction [28] $end
$var wire 1 4# instruction [27] $end
$var wire 1 5# instruction [26] $end
$var wire 1 6# instruction [25] $end
$var wire 1 7# instruction [24] $end
$var wire 1 8# instruction [23] $end
$var wire 1 9# instruction [22] $end
$var wire 1 :# instruction [21] $end
$var wire 1 ;# instruction [20] $end
$var wire 1 <# instruction [19] $end
$var wire 1 =# instruction [18] $end
$var wire 1 ># instruction [17] $end
$var wire 1 ?# instruction [16] $end
$var wire 1 @# instruction [15] $end
$var wire 1 A# instruction [14] $end
$var wire 1 B# instruction [13] $end
$var wire 1 C# instruction [12] $end
$var wire 1 D# instruction [11] $end
$var wire 1 E# instruction [10] $end
$var wire 1 F# instruction [9] $end
$var wire 1 G# instruction [8] $end
$var wire 1 H# instruction [7] $end
$var wire 1 I# instruction [6] $end
$var wire 1 J# instruction [5] $end
$var wire 1 K# instruction [4] $end
$var wire 1 L# instruction [3] $end
$var wire 1 M# instruction [2] $end
$var wire 1 N# instruction [1] $end
$var wire 1 O# instruction [0] $end
$var reg 6 P# opcode [5:0] $end
$var reg 5 Q# rs [4:0] $end
$var reg 5 R# rt [4:0] $end
$var reg 5 S# rd [4:0] $end
$var reg 5 T# shamt [4:0] $end
$var reg 6 U# funct [5:0] $end
$var reg 16 V# immediate [15:0] $end
$var reg 26 W# jump_address [25:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx "
bx #
bx $
bx I
bx J
bx K
bx M
bx !"
x""
x#"
x$"
x%"
x/#
bx P#
bx Q#
bx R#
bx S#
bx T#
bx U#
bx V#
bx W#
b100000 !
b100000 :!
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
xE
xF
xG
xH
xL
xS
xR
xQ
xP
xO
xN
xX
xW
xV
xU
xT
x]
x\
x[
xZ
xY
xb
xa
x`
x_
x^
xg
xf
xe
xd
xc
xm
xl
xk
xj
xi
xh
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
xG"
xH"
xI"
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
$end
#10000
b1111 "
b11001 #
b0 $
0~!
0}!
0|!
0{!
1z!
0y!
0x!
1w!
1v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
1Z!
1Y!
1X!
1W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0F"
0E"
0D"
1C"
0B"
1A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0H"
0G"
0I"
b0 !"
0""
0#"
0$"
0%"
b101000 !"
0D
0C
0B
1A
0@
1?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0E
0F
0G
0H
#30000
b110010 "
b11110 #
b1 $
1~!
0z!
1y!
1x!
0Z!
0X!
0W!
1V!
1U!
0C"
1B"
0A"
1@"
b0 !"
b10100 !"
1$"
1B
0A
1@
0?
1G
#50000
b11110000111100001111000011110000 "
b1111000011110000111100001111 #
b10 $
0~!
1}!
1z!
0v!
1r!
1q!
1p!
1o!
1j!
1i!
1h!
1g!
1b!
1a!
1`!
1_!
0Y!
1T!
1S!
1N!
1M!
1L!
1K!
1F!
1E!
1D!
1C!
1>!
1=!
1<!
1;!
1F"
1E"
1D"
1C"
1A"
1?"
1>"
1="
1<"
1;"
1:"
19"
18"
17"
16"
15"
14"
13"
12"
11"
10"
1/"
1."
1-"
1,"
1+"
1*"
1)"
1("
1'"
1G"
1I"
b0 !"
0$"
1""
0B
0@
0G
1E
#70000
b11 $
1~!
0""
b11111111111111111111111111111111 !"
1%"
0E
1D
1C
1B
1A
1@
1?
1>
1=
1<
1;
1:
19
18
17
16
15
14
13
12
11
10
1/
1.
1-
1,
1+
1*
1)
1(
1'
1&
1%
1H
#90000
b0 "
b0 #
b0 $
0~!
0}!
0z!
0y!
0x!
0w!
0r!
0q!
0p!
0o!
0j!
0i!
0h!
0g!
0b!
0a!
0`!
0_!
0V!
0U!
0T!
0S!
0N!
0M!
0L!
0K!
0F!
0E!
0D!
0C!
0>!
0=!
0<!
0;!
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0G"
0I"
b0 !"
0%"
1""
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0H
1E
#110000
b1010 "
b10100 #
b110 $
1}!
1|!
1x!
1v!
1Y!
1W!
1E"
1D"
1C"
1B"
0""
b1 !"
0E
1D
#130000
b1111 $
1~!
1{!
b0 !"
1""
0D
1E
#150000
b1100100 I
b1100100 J
b0 K
0.#
0-#
0,#
0+#
0*#
1)#
0(#
0'#
1&#
1%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
1g"
0f"
0e"
1d"
1c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0/#
1/#
1L
#170000
b11001000 J
b1 K
1.#
0)#
1(#
0&#
1$#
0/#
1/#
#190000
b110010 I
b1100100 J
b10 K
0.#
1-#
1)#
0(#
1&#
0$#
1h"
0g"
1e"
0c"
0/#
1/#
#210000
b1100100 I
b110010 J
b11 K
1.#
1*#
0)#
1'#
0%#
0h"
1g"
0e"
1c"
0/#
1/#
#230000
b111 K
1,#
0/#
0L
#250000
b10000110000100000100000 M
0O#
0N#
0M#
0L#
0K#
1J#
0I#
0H#
0G#
0F#
0E#
1D#
0C#
0B#
0A#
0@#
1?#
1>#
0=#
0<#
0;#
0:#
19#
08#
07#
06#
05#
04#
03#
02#
01#
00#
b0 P#
b0 Q#
b0 R#
b0 S#
b0 T#
b0 U#
b0 V#
b0 W#
b10 Q#
b11 R#
b1 S#
b100000 U#
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
1h
0g
0f
0e
0d
0c
1b
0a
0`
0_
0^
1]
1\
0[
0Z
0Y
0X
1W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
#270000
b100000010000010000011111001111 M
1O#
1N#
1M#
1L#
0J#
1I#
1H#
1G#
1F#
1E#
0D#
0>#
12#
b0 Q#
b0 R#
b0 S#
b0 U#
b1000 P#
b10 Q#
b1 R#
b11111001111 V#
1}
1|
1{
1z
1w
1v
1u
1t
1s
1P
0h
0b
0\
#290000
b1000000001000000000000000000 M
0O#
0N#
0M#
0L#
0I#
0H#
0G#
0F#
0E#
0?#
1=#
09#
14#
02#
b0 P#
b0 Q#
b0 R#
b0 V#
b10 P#
b1000000000000000000 W#
1'!
0}
0|
0{
0z
0w
0v
0u
0t
0s
0]
0W
1R
0P
#310000
b11111111111111111111111111111111 M
1O#
1N#
1M#
1L#
1K#
1J#
1I#
1H#
1G#
1F#
1E#
1D#
1C#
1B#
1A#
1@#
1?#
1>#
1<#
1;#
1:#
19#
18#
17#
16#
15#
13#
12#
11#
10#
b0 P#
b0 W#
b111111 P#
0'!
1S
1Q
1P
1O
1N
