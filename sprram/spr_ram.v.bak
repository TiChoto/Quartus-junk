module spr_ram (
    input wire clk,
    input wire Sw,
    input wire [4:0] Sa,
    input wire [31:0] Sce,
    input wire [31:0] Sdin [31:0],
    input wire [31:0] Sin,
    output wire [31:0] Sout
);

    reg [31:0] regfile [31:0];   // 32 registers of 32-bits each
    wire [31:0] X;               // Output of decoder for Sa
    wire [31:0] Sout_bus [31:0]; // Bus for each register output

    integer i;

    // 5-to-32 Decoder for Read Address (Sa)
    assign X = (1 << Sa);

    // Writing Logic
    always @(posedge clk) begin
        if (Sw) begin
            for (i = 0; i < 32; i = i + 1) begin
                if (Sce[i]) begin
                    regfile[i] <= Sdin[i];
                end else begin
                    regfile[i] <= Sin;
                end
            end
        end
    end

    // Read output
    generate
        genvar j;
        for (j = 0; j < 32; j = j + 1) begin : read_outputs
            assign Sout_bus[j] = X[j] ? regfile[j] : 32'b0;
        end
    endgenerate

    // OR-chain to combine all register outputs
    assign Sout = Sout_bus[0] | Sout_bus[1] | Sout_bus[2] | Sout_bus[3] |
                  Sout_bus[4] | Sout_bus[5] | Sout_bus[6] | Sout_bus[7] |
                  Sout_bus[8] | Sout_bus[9] | Sout_bus[10] | Sout_bus[11] |
                  Sout_bus[12] | Sout_bus[13] | Sout_bus[14] | Sout_bus[15] |
                  Sout_bus[16] | Sout_bus[17] | Sout_bus[18] | Sout_bus[19] |
                  Sout_bus[20] | Sout_bus[21] | Sout_bus[22] | Sout_bus[23] |
                  Sout_bus[24] | Sout_bus[25] | Sout_bus[26] | Sout_bus[27] |
                  Sout_bus[28] | Sout_bus[29] | Sout_bus[30] | Sout_bus[31];

endmodule
